(rp (
(strategy/solution-strategy/modifications ((type . list-class) (min-length . 0) (max-length . #f) (curr-length . 0) (member-vars)))
(strategy/solution-strategy/original-settings ((type . struct-class) (members-state (active? (value . #t) (type . boolean-class)) (name (value . "Original Settings") (type . string-class)) (command (value . "") (type . string-class)) (count (type . integer-class) (value . 1) (min . 0) (max . #f)))))
(strategy/solution-strategy/before-init-modification ((type . struct-class) (members-state (active? (value . #f) (type . boolean-class)) (name (value . "Pre-Initialization") (type . string-class)) (command (value . "") (type . string-class)) (count (type . integer-class) (value . 0) (min . 0) (max . #f)))))
(strategy/initialization-strategy ((selection . init-from-case) (type . union-class) (members-state (init-from-case . #f) (init-from-data-file (type . file-class) (value . "") (remote-file? . #t) (file-pattern . "*.dat*")) (init-from-solution (selection . init-from-case) (type . union-class) (members-state (init-from-case . #f) (init-from-data-file (type . file-class) (value . "") (remote-file? . #t) (file-pattern . "*.dat*")))))))
(fluent-case-version 194)
(domains (((1 geom-domain mixture) (children) (material . air))))
(monitor/convergencesets ((frequency . 1) (condition . #f) (conv-reports) (check-for . #f)))
(last-casefile-name "100mm2D.msh")
(pseudo-transient-formulation? #t)
(amg-scalar/group-size-3d 6)
(amg/greedy-coarsening? #t)
(amg-coupled/greedy-coarsening? #t)
(amg-coupled/group-size-3d 6)
(pdf/dynamic-fvar? #f)
(flow/scheme 24)
(species/isat-file "C:/Users/aus1n19/Ansys_local/100mm2D")
(residuals/window 0)
(mesh/interpolate-in-time? #f)
(dynamesh/motion-history/basename "C:/Users/aus1n19/Ansys_local/100mm2D")
(dynamesh/in-cyn/crank-period 10000000000.)
(dynamesh/in-cyn/crank-rpm 0.1666666666666667)
(dynamesh/remesh/repartition-interface-threshold 10.)
(dynamesh/remesh/repartition-interval 20)
(materials ((copper solid (chemical-formula . cu) (density (constant . 8978)) (specific-heat (constant . 381)) (thermal-conductivity (constant . 387.6)) (atomic-number (constant . 29)) (electric-conductivity (constant . 58000000.)) (magnetic-permeability (constant . 1.257e-06)) (struct-youngs-modulus (constant . 117000000000.)) (struct-poisson-ratio (constant . 0.33))) (air fluid (chemical-formula . #f) (density (constant . 1.225) (compressible-liquid 101325 1.225 142000. 1 1.1 0.9)) (specific-heat (constant . 1006.43) (polynomial piecewise-polynomial (100 1000 1161.48214452351 -2.36881890191577 0.0148551108358867 -5.03490927522584e-05 9.9285695564579e-08 -1.11109658897742e-10 6.54019600406048e-14 -1.57358768447275e-17) (1000 3000 -7069.81410143802 33.7060506468204 -0.0581275953375815 5.42161532229608e-05 -2.936678858119e-08 9.237533169567681e-12 -1.56555339604519e-15 1.11233485020759e-19))) (thermal-conductivity (constant . 0.0242)) (viscosity (constant . 1.7894e-05) (sutherland 1.716e-05 273.11 110.56) (power-law 1.716e-05 273.11 0.666)) (molecular-weight (constant . 28.966)) (lennard-jones-length (constant . 3.711)) (lennard-jones-energy (constant . 78.59999999999999)) (thermal-accom-coefficient (constant . 0.9137)) (velocity-accom-coefficient (constant . 0.9137)) (formation-entropy (constant . 194336)) (reference-temperature (constant . 298.15)) (critical-pressure (constant . 3758000.)) (critical-temperature (constant . 132.3)) (acentric-factor (constant . 0.033)) (critical-volume (constant . 0.002857)) (therm-exp-coeff (constant . 0)) (speed-of-sound (none . #f))) (aluminum solid (chemical-formula . al) (density (constant . 2719)) (specific-heat (constant . 871)) (atomic-number (constant . 13)) (thermal-conductivity (constant . 202.4)) (formation-entropy (constant . 164448.08)) (electric-conductivity (constant . 35410000.)) (magnetic-permeability (constant . 1.257e-06)) (struct-youngs-modulus (constant . 70000000000.)) (struct-poisson-ratio (constant . 0.32)))))
(partition/auto/applied? #t)
(parallel/nprocs_string "4")
(parallel/function "fluent 2ddp -r19.4.0   -ic=default -node -t4")
(case-config ((rp-seg? . #t) (rp-acoustics? . #f) (rp-atm? . #f) (rp-axi? . #f) (rp-des? . #f) (rp-dpm-cache? . #f) (rp-dpm-cache-serial? . #f) (rp-unsteady? . #f) (rp-dual-time? . #f) (rp-amg? . #f) (rf-energy? . #t) (rp-hvac? . #f) (rp-inviscid? . #f) (rp-ke? . #t) (rp-kklw? . #f) (rp-kw? . #f) (rp-lam? . #f) (rp-les? . #f) (rp-structure-linear? . #f) (rp-lsf? . #f) (rp-net? . #f) (rp-react? . #f) (rp-sa? . #f) (rp-sas? . #f) (rp-sge? . #f) (rp-spe? . #f) (rp-spe-part? . #f) (rp-potential? . #f) (rp-electro-chem? . #f) (rp-spe-site? . #f) (rp-spe-surf? . #f) (rp-trans-one-eqn? . #f) (rp-trans-sst? . #f) (rp-trb-scl? . #t) (rp-turb? . #t) (rp-absorbing-media? . #f) (rp-visc? . #t) (rp-v2f? . #f) (sg-cylindrical? . #f) (sg-disco? . #f) (sg-montecarlo? . #f) (sg-bee-gees? . #f) (sg-crev? . #f) (sg-dpm? . #f) (sg-dqmom-iem? . #f) (sg-dtrm? . #f) (sg-dynmesh? . #f) (sg-overset? . #f) (sg-ecfm? . #f) (sg-geqn? . #f) (sg-hg? . #f) (sg-inert? . #f) (sg-ignite? . #f) (sg-network? . #f) (sg-node-udm? . #f) (sg-noniterative? . #f) (sg-nox? . #f) (sg-melt? . #f) (sg-micro-mix? . #f) (sg-mphase? . #f) (sg-p1? . #f) (sg-par-premix? . #f) (sg-pb? . #f) (sg-pdf? . #f) (sg-pdf-transport? . #f) (sg-premixed? . #f) (sg-pull? . #f) (sg-rosseland? . #f) (sg-rsm? . #f) (sg-s2s? . #f) (sg-soot? . #f) (sg-sox? . #f) (sg-spark? . #f) (sg-swirl? . #f) (sg-udm? . #f) (sg-uds? . #f) (sg-addon? . #f) (sg-addon-loaded? . #f) (sg-vfr? . #f) (sg-solar? . #f) (sg-wetsteam? . #f) (sg-moistair? . #f) (sg-wallfilm? . #f) (hyb-init? . #t) (rp-spe-surf-rc? . #f) (rp-3d? . #f) (rp-double? . #t) (rp-graphics? . #t) (rp-host? . #t) (rp-thread? . #f) (dpm-cache? . #t) (rp-wallfilm? . #f)))
(delta-time-sampled-species (0.))
(cfd-post-mesh-info ((0 0 (surface_body) (inlet velocity-inlet surface_body) (outlet pressure-outlet surface_body) (wall wall surface_body))))
(context/current-r17+ ("coupled-pseudo-transient" "default"))
(context/map-r17+ (("default" 0 (lambda () #t) (lambda () #f) #f) ("update derivatives after flow-solve" 90 (lambda () (rpgetvar 'context/auto-detect?)) (lambda () #t) (mom/update-derivatives-after-flow-solve? #t boolean #f #t #t)) ("pseudo-transient IF (single-phase) PBNS steady" 100 (lambda () (and (rpgetvar 'context/auto-detect?) (not (cdr (assq 'sg-mphase? (%rp-config #f)))) (cdr (assq 'rp-seg? (%rp-config #f))) (not (cdr (assq 'rp-unsteady? (%rp-config #f)))))) (lambda () #t) (pseudo-transient-formulation? #t boolean #f #t #f ("Pseudo transient formulation:                    ~a" (("enabled" . #t) ("disabled" . #f))))) ("NOT pseudo-transient IF (single-phase) transient" 120 (lambda () (and (rpgetvar 'context/auto-detect?) (not (cdr (assq 'sg-mphase? (%rp-config #f)))) (cdr (assq 'rp-unsteady? (%rp-config #f))))) (lambda () #t) (pseudo-transient-formulation? #f boolean #f #f #f ("Pseudo transient formulation:                    ~a" (("enabled" . #t) ("disabled" . #f))))) ("compr. enh. num. + press.-cpld. F cycle IF (single-phase) PBNS" 130 (lambda () (and (rpgetvar 'context/auto-detect?) (not (cdr (assq 'sg-mphase? (%rp-config #f)))) (cdr (assq 'rp-seg? (%rp-config #f))))) (lambda () #t) (compress/enhanced-numerics/on? #t boolean #f #t #t) (pressure-coupled/cycle-type 3 integer #f 3 3 ("Multigrid cycle type for the pressure coupled:   ~a" ((0 . "Flexible") (1 . "V-Cycle") (2 . "W-Cycle") (3 . "F-Cycle"))))) ("HOTR IF (single-phase) except PBNS Transient" 140 (lambda () (and (rpgetvar 'context/auto-detect?) (not (cdr (assq 'sg-mphase? (%rp-config #f)))) (not (and (cdr (assq 'rp-seg? (%rp-config #f))) (cdr (assq 'rp-unsteady? (%rp-config #f))))))) (lambda () #t) (recon/relax/relax? #t boolean #f #t #f ("HOTR:                                            ~a" (("enabled" . #t) ("disabled" . #f))))) ("coupled IF (single-phase) PBNS steady" 150 (lambda () (and (rpgetvar 'context/auto-detect?) (not (cdr (assq 'sg-mphase? (%rp-config #f)))) (cdr (assq 'rp-seg? (%rp-config #f))) (not (cdr (assq 'rp-unsteady? (%rp-config #f)))))) (lambda () #t) (density/relax 0.5 real #f 0.5 1 ("Under-Relaxation Factor for density              ~a")) (density/pseudo-relax 0.5 real #f 0.5 1.) (flow/scheme 24 integer #f 24 20 ("P-V coupling method:                             ~a" (("SIMPLE" . 20) ("SIMPLEC" . 21) ("PISO" . 22) ("Coupled" . 24) ("Phase Coupled SIMPLE" . 23) ("Phase Coupled PISO" . 30))))) ("simpleC IF (single-phase) PBNS transient" 170 (lambda () (and (rpgetvar 'context/auto-detect?) (not (cdr (assq 'sg-mphase? (%rp-config #f)))) (cdr (assq 'rp-seg? (%rp-config #f))) (cdr (assq 'rp-unsteady? (%rp-config #f))))) (lambda () #t) (pressure/relax 0.8 real #f 0.8 0.3 ("Under-Relaxation Factor for pressure:            ~a")) (mom/relax 0.7 real #f 0.7 0.7 ("Under-Relaxation Factor for momentum:            ~a")) (simplec/skew-iter 1 integer #f 1 0 ("Skewness Correction for SIMPLEC                  ~a")) (density/relax 1 real #f 1 1 ("Under-Relaxation Factor for density              ~a")) (density/pseudo-relax 1 real #f 1 1.) (pressure-coupled/courant-number 10000000000. real #f 10000000000. 200. ("CFL number for the coupled flow equation system: ~a")) (flow/scheme 21 integer #f 21 20 ("P-V coupling method:                             ~a" (("SIMPLE" . 20) ("SIMPLEC" . 21) ("PISO" . 22) ("Coupled" . 24) ("Phase Coupled SIMPLE" . 23) ("Phase Coupled PISO" . 30))))) ("impl. Cou. num. IF (single-phase) DBNS incompressible" 180 (lambda () (and (rpgetvar 'context/auto-detect?) (not (cdr (assq 'sg-mphase? (%rp-config #f)))) (not (cdr (assq 'rp-seg? (%rp-config #f)))) (not (is-compressible?)))) (lambda () #t) (courant-number/implicit 1000 real #f 1000 5. ("CFL value for the implicit dbns coupled solver:  ~a"))) ("impl. Cou. num. IF (single-phase) DBNS transient compressible" 200 (lambda () (and (rpgetvar 'context/auto-detect?) (not (cdr (assq 'sg-mphase? (%rp-config #f)))) (not (cdr (assq 'rp-seg? (%rp-config #f)))) (cdr (assq 'rp-unsteady? (%rp-config #f))) (is-compressible?))) (lambda () #t) (courant-number/implicit 50 real #f 50 5. ("CFL value for the implicit dbns coupled solver:  ~a"))) ("PRESTO! IF (single-phase) PBNS steady buoyant OR swirl" 210 (lambda () (and (rpgetvar 'context/auto-detect?) (not (cdr (assq 'sg-mphase? (%rp-config #f)))) (cdr (assq 'rp-seg? (%rp-config #f))) (not (cdr (assq 'rp-unsteady? (%rp-config #f)))) (or (and (cdr (assq 'rp-axi? (%rp-config #f))) (cdr (assq 'sg-swirl? (%rp-config #f)))) (have-boussinesq?)))) (lambda () #t) (pressure/scheme 14 integer #f 14 12 ("Spatial discretization for pressure:             ~a" (("First Order Upwind" . 0) ("Second Order Upwind" . 1) ("Power Law" . 2) ("Central Differencing" . 3) ("QUICK" . 4) ("Modified HRIC" . 5) ("Third-Order MUSCL" . 6) ("Bounded Central Differencing" . 7) ("CICSAM" . 8) ("Low Diffusion Second Order" . 9) ("Standard" . 10) ("Linear" . 11) ("Second Order" . 12) ("Body Force Weighted" . 13) ("PRESTO!" . 14) ("Continuity Based" . 15) ("Geo-Reconstruct" . 16) ("Donor-Acceptor" . 17) ("SIMPLE" . 20) ("SIMPLEC" . 21) ("PISO" . 22) ("Phase Coupled SIMPLE" . 23) ("Coupled" . 24) ("Fractional Step" . 25) ("Compressive" . 28) ("BGM" . 29) ("Phase Coupled PISO" . 30))))) ("PRESTO! IF sing.-eq. multi-phase" 230 (lambda () (and (rpgetvar 'context/auto-detect?) (let ((sgm (cdr (assq 'sg-mphase? (%rp-config #f))))) (and sgm (or (eq? 'drift-flux sgm) (eq? 'homogeneous sgm) (eq? 'vof sgm)))))) (lambda () #t) (pressure/scheme 14 integer #f 14 12 ("Spatial discretization for pressure:             ~a" (("First Order Upwind" . 0) ("Second Order Upwind" . 1) ("Power Law" . 2) ("Central Differencing" . 3) ("QUICK" . 4) ("Modified HRIC" . 5) ("Third-Order MUSCL" . 6) ("Bounded Central Differencing" . 7) ("CICSAM" . 8) ("Low Diffusion Second Order" . 9) ("Standard" . 10) ("Linear" . 11) ("Second Order" . 12) ("Body Force Weighted" . 13) ("PRESTO!" . 14) ("Continuity Based" . 15) ("Geo-Reconstruct" . 16) ("Donor-Acceptor" . 17) ("SIMPLE" . 20) ("SIMPLEC" . 21) ("PISO" . 22) ("Phase Coupled SIMPLE" . 23) ("Coupled" . 24) ("Fractional Step" . 25) ("Compressive" . 28) ("BGM" . 29) ("Phase Coupled PISO" . 30))))) ("Flow: transient; DPM: coupled" 10 (lambda () (and (cdr (assq 'rp-unsteady? (%rp-config #f))) (cdr (assq 'sg-dpm? (%rp-config #f))))) (lambda () (or (cdr (assq 'sg-dpm? (%rp-config #f))) (dpm-bcs-available?))) (dpm/sources-every-flow-iteration? #t boolean #f #t #f ("Update DPM source terms every flow iteration?:   ~a" (("enabled" . #t) ("disabled" . #f))))) ("Flow: transient; DPM: unsteady, coupled" 12 (lambda () (and (cdr (assq 'sg-dpm? (%rp-config #f))) (and (cdr (assq 'rp-unsteady? (%rp-config #f))) (rpgetvar 'dpm/unsteady-tracking?)))) (lambda () (or (cdr (assq 'sg-dpm? (%rp-config #f))) (dpm-bcs-available?))) (dpm/relax 0.9 real #f 0.9 0.5 ("DPM source terms under-relaxation factor:        ~a"))) ("DPM: Unsteady" 14 (lambda () (rpgetvar 'dpm/unsteady-tracking?)) (lambda () (or (cdr (assq 'sg-dpm? (%rp-config #f))) (dpm-bcs-available?))) (dpm/max-steps 500 integer #f 500 50000 ("DPM maximum number of steps:                     ~a"))) ("VOF: Implicit and Steady State" 16 (lambda () (and (eq? (cdr (assq 'sg-mphase? (%rp-config #f))) 'vof) (not (cdr (assq 'rp-unsteady? (%rp-config #f)))) (eqv? (rpgetvar 'mp/scheme-type) 0))) (lambda () #t) (flow/scheme 24 integer #f 24 20 ("P-V coupling method:                             ~a" (("SIMPLE" . 20) ("SIMPLEC" . 21) ("PISO" . 22) ("Coupled" . 24) ("Phase Coupled SIMPLE" . 23) ("Phase Coupled PISO" . 30)))) (pseudo-transient-formulation? #t boolean #f #t #f ("Pseudo transient for steady state VOF:           ~a" (("enabled" . #t) ("disabled" . #f))))) ("Wall Film: EWF with DPM collection" 18 (lambda () (if (and (rp-3d?) (cdr (assq 'rp-wallfilm? (%rp-config #f)))) (and (cdr (assq 'sg-wallfilm? (%rp-config #f))) (dpm-bcs-available?)) #f)) (lambda () (if (and (rp-3d?) (cdr (assq 'rp-wallfilm? (%rp-config #f)))) (let* ((film-vars (rpgetvar 'wall-film/model-parameters)) (dpm-collection? (cdr (assq 'dpm-collection? film-vars))) (dpm-splashing? (cdr (assq 'dpm-splashing? film-vars))) (sg-wallfilm? (cdr (assq 'sg-wallfilm? (%rp-config #f))))) (or (not sg-wallfilm?) (and dpm-collection? dpm-splashing?))) #f)) (dpm/orourke-splash-fraction? #f boolean #f #f #t ("O'Rourke splash fraction formulation:            ~a" (("enabled" . #t) ("disabled" . #f)))) (dpm/splash-pdf-tail-limiting? #f boolean #f #f #t ("Splash PDF distribution tail limiting:           ~a" (("enabled" . #t) ("disabled" . #f))))) ("MP: NITA defaults" 20 (lambda () (and (equal? (cdr (assq 'sg-mphase? (%rp-config #f))) 'multi-fluid) (eqv? (rpgetvar 'flow/scheme) 23) (cdr (assq 'sg-noniterative? (%rp-config #f))))) (lambda () #f) (piso/neighbor-option 1 integer #f 1 0 ("Piso neighbor option:                            ~a")) (piso/neighbor-add-option 1 integer #f 1 0 ("Piso neighbor add option:                        ~a")) (piso/neighbor-iter 2 integer #f 2 1 ("Piso neighbor iterations:                        ~a")) (mp/vof-piso-corrector? #t boolean #f #t #f ("Multiphase Piso vof corrector:                   ~a" (("enabled" . #t) ("disabled" . #f))))) ("MP: NITA defaults r182a" 22 (lambda () (and (equal? (cdr (assq 'sg-mphase? (%rp-config #f))) 'multi-fluid) (eqv? (rpgetvar 'flow/scheme) 23) (cdr (assq 'sg-noniterative? (%rp-config #f))))) (lambda () #f) (pressure/max-iter 0 integer #f 0 10 ("Pressure skewness correction:                    ~a"))) ("MP: NITA defaults r190" 26 (lambda () (and (equal? (cdr (assq 'sg-mphase? (%rp-config #f))) 'multi-fluid) (eqv? (rpgetvar 'flow/scheme) 23) (cdr (assq 'sg-noniterative? (%rp-config #f))) (eqv? (rpgetvar 'mp/scheme-type) 0))) (lambda () #f) (mp/max-iter 1 integer #f 1 5 ("Max. no. of MP NITA sub iterations:              ~a"))) ("MP: NITA: override mp/max-iter from 'defaults r190' with higher number if mp/vof-piso-corrector is Off" 30 (lambda () (and (equal? (cdr (assq 'sg-mphase? (%rp-config #f))) 'multi-fluid) (eqv? (rpgetvar 'flow/scheme) 23) (cdr (assq 'sg-noniterative? (%rp-config #f))) (eqv? (rpgetvar 'mp/scheme-type) 0) (not (rpgetvar 'mp/vof-piso-corrector?)))) (lambda () #f) (mp/max-iter 5 integer #f 5 5 ("Max. no. of MP NITA sub iterations:              ~a"))) ("MP: NITA defaults r192" 27 (lambda () (and (equal? (cdr (assq 'sg-mphase? (%rp-config #f))) 'multi-fluid) (eqv? (rpgetvar 'flow/scheme) 23) (cdr (assq 'sg-noniterative? (%rp-config #f))))) (lambda () #f) (pressure/explicit-relax 0.5 real #f 0.5 1 ("Explicit Relaxation Factor for Pressure:         ~a")) (mom/explicit-relax 0.7 real #f 0.7 1. ("Explicit Relaxation Factor for Momentum:         ~a"))) ("DPM with NITA" 24 (lambda () (cdr (assq 'sg-noniterative? (%rp-config #f)))) (lambda () (and (cdr (assq 'sg-dpm? (%rp-config #f))) (dpm-bcs-available?))) (dpm/relax 1. real #f 1. 0.5 ("DPM source term under-relaxation factor:         ~a"))) ("Aggressive NITA" 990 (lambda () (and (cdr (assq 'sg-noniterative? (%rp-config #f))) (rpgetvar 'nita/aggressive?) (not (equal? (cdr (assq 'sg-mphase? (%rp-config #f))) 'multi-fluid)))) (lambda () #f) (pressure/max-iter 0 integer #f 0 10 ("Max. no. of Pressure NITA sub iterations:             ~a")) (mom/max-iter 1 integer #f 1 5 ("Max. no. of Momentum NITA sub iterations:             ~a")) (temperature/max-iter 1 integer #f 1 5 ("Max. no. of Temperature NITA sub iterations:          ~a")) (enthalpy/max-iter 1 integer #f 1 5 ("Max. no. of Enthalpy sub iterations:                  ~a")) (mp/max-iter 1 integer #f 1 5 ("Max. no. of Multiphase NITA sub iterations:           ~a")) (potential/max-iter 1 integer #f 1 5 ("Max. no. of Potential NITA sub iterations:            ~a")) (dqmom-iem/max-iter 1 integer #f 1 5 ("Max. no. of DQMOM NITA sub iterations:                ~a")) (granular-temperature/max-iter 1 integer #f 1 5 ("Max. no. of Granular-Temperature NITA sub iterations: ~a")) (w-swirl/max-iter 1 integer #f 1 5 ("Max. no. of Swirl NITA sub iterations:                ~a")) (nut/max-iter 1 integer #f 1 5 ("Max. no. of Turbulence(NU) NITA sub iterations:       ~a")) (k/max-iter 1 integer #f 1 5 ("Max. no. of Turbulence(K) NITA sub iterations:        ~a")) (epsilon/max-iter 1 integer #f 1 5 ("Max. no. of Turbulence(Epsilon) NITA sub iterations:  ~a")) (v2/max-iter 1 integer #f 1 5 ("Max. no. of Turbulence(V2) NITA sub iterations:       ~a")) (f/max-iter 1 integer #f 1 5 ("Max. no. of Turbulence(f) NITA sub iterations:        ~a")) (kl/max-iter 1 integer #f 1 5 ("Max. no. of Turbulence(kl) NITA sub iterations:       ~a")) (omega/max-iter 1 integer #f 1 5 ("Max. no. of Turbulence(Omega) NITA sub iterations:    ~a")) (intermit/max-iter 1 integer #f 1 5 ("Max. no. of Turbulence(Intermit) NITA sub iterations: ~a")) (retheta/max-iter 1 integer #f 1 5 ("Max. no. of Turbulence(retheta) NITA sub iterations:  ~a")) (drsm/max-iter 1 integer #f 1 5 ("Max. no. of Turbulence(drsm) NITA sub iterations:     ~a")) (fmean/max-iter 1 integer #f 1 5 ("Max. no. of fmean NITA sub iterations:                ~a")) (fmean2/max-iter 1 integer #f 1 5 ("Max. no. of fmean2 NITA sub iterations:               ~a")) (fvar/max-iter 1 integer #f 1 5 ("Max. no. of fvar NITA sub iterations:                 ~a")) (fvar2/max-iter 1 integer #f 1 5 ("Max. no. of fvar2 NITA sub iterations:                ~a")) (premixc/max-iter 1 integer #f 1 5 ("Max. no. of Premix NITA sub iterations:               ~a")) (premix-g-eqn/max-iter 1 integer #f 1 5 ("Max. no. of Premix-G-Eq NITA sub iterations:          ~a")) (premix-g-var/max-iter 1 integer #f 1 5 ("Max. no. of Premix-G-Var NITA sub iterations:         ~a")) (pdftss/max-iter 1 integer #f 1 5 ("Max. no. of PDF-tss NITA sub iterations:              ~a")) (pull/max-iter 1 integer #f 1 5 ("Max. no. of Pollutant NITA sub iterations:            ~a")) (soot-mom/max-iter 1 integer #f 1 5 ("Max. no. of Soots NITA sub iterations:                ~a")) (tvar/max-iter 1 integer #f 1 5 ("Max. no. of Tvar NITA sub iterations:                 ~a")) (pressure/cycle-type 3 integer #f 3 1 ("Multigrid cycle type for the pressure:                ~a")) (pressure/amg-alpha 0.01 real #f 0.01 0.1 ("Multigrid cycle type for the pressure coupled:        ~a")) (flow/scheme 25 integer #f 25 20 ("Flow Scheme is:                                       ~a")) (nita/flux/extrapolate? #t boolean #f #t #f ("Mass flux extrapolation:                              ~a" (("enabled" . #t) ("disabled" . #f))))) ("Multi Phase PISO" 32 (lambda () (and (equal? (cdr (assq 'sg-mphase? (%rp-config #f))) 'multi-fluid) (eqv? (rpgetvar 'flow/scheme) 30))) (lambda () #f) (pressure/max-iter 0 integer #f 0 10 ("Pressure skewness correction:         ~a")) (piso/coupling? #f boolean #f #f #t ("Skewness neighbor coupling:           ~a"))) ("preview-defaults" 1000 (lambda () (rpgetvar 'solver/mode/preview-defaults)) (lambda () #f)) ("fast" 1000 (lambda () (rpgetvar 'solver/mode/fast)) (lambda () #f)) ("robust" 1000 (lambda () (rpgetvar 'solver/mode/robust)) (lambda () #f)) ("preview-defaults-base" 1003 (lambda () (rpgetvar 'solver/mode/preview-defaults)) (lambda () #t) (amg-coupled/greedy-coarsening? #t boolean #f #t #f ("Aggressive AMG coarsening for coupled equations: ~a" (("enabled" . #t) ("disabled" . #f)))) (amg/greedy-coarsening? #t boolean #f #t #f ("Aggressive AMG coarsening for scalar equations: ~a" (("enabled" . #t) ("disabled" . #f)))) (amg-coupled/group-method-fallback 2 integer #f 2 0) (amg/group-method-fallback 2 integer #f 2 0) (amg-coupled/group-size-3d 6 integer #f 6 8 ("AMG Group size for coupled equations: ~a")) (amg-scalar/group-size-3d 6 integer #f 6 8 ("AMG Group size for scalar equations: ~a")) (mesh/bad/bl-optimized? #t boolean #f #t #f ("Poor mesh numerics boundary layer optimized: ~a" (("enabled" . #t) ("disabled" . #f))))) ("preview-defaults-pbns-base" 1003 (lambda () (and (cdr (assq 'rp-seg? (%rp-config #f))) (rpgetvar 'solver/mode/preview-defaults))) (lambda () #t) (residuals/scale? #t boolean () #t #t ("Scale residuals: ~a" (("enabled" . #t) ("disabled" . #f)))) (residuals/compute-local? #t boolean #f #t #f ("Compute locally scaled residuals: ~a" (("enabled" . #t) ("disabled" . #f)))) (residuals/local? #t boolean #f #t #f ("Report locally scaled residuals: ~a" (("enabled" . #t) ("disabled" . #f))))) ("preview-defaults-transient-pbns-base" 1003 (lambda () (and (cdr (assq 'rp-unsteady? (%rp-config #f))) (cdr (assq 'rp-seg? (%rp-config #f))) (rpgetvar 'solver/mode/preview-defaults))) (lambda () #t) (pressure/relax 0.8 real #f 0.8 0.3 ("Under-Relaxation Factor for pressure: ~a")) (mom/relax 0.7 real #f 0.7 0.7 ("Under-Relaxation Factor for momentum: ~a")) (density/relax 1 real #f 1 1 ("Under-Relaxation Factor for density: ~a")) (density/pseudo-relax 1 real #f 1 1.) (pressure-coupled/courant-number 10000000000. real #f 10000000000. 200. ("CFL number for the coupled flow equation system: ~a")) (flow/scheme 21 integer #f 21 20 ("Pressure-velocity coupling: ~a" (("SIMPLE" . 20) ("SIMPLEC" . 21) ("PISO" . 22) ("Coupled" . 24) ("Phase Coupled SIMPLE" . 23) ("Phase Coupled PISO" . 30))))) ("robust-base" 1000 (lambda () (rpgetvar 'solver/mode/robust)) (lambda () #t) (pressure/presto/limit-pgrad? #t boolean #f #t #f ("Limit high order terms in PRESTO!: ~a" (("enabled" . #t) ("disabled" . #f)))) (mesh/bad/enable-quality-based-treatment? #t boolean #f #t #f ("Enable poor mesh numerics based on cell quality: ~a" (("enabled" . #t) ("disabled" . #f)))) (amg/divergence-epsilon 1000000. real #f 1000000. 1000. ("AMG divergence epsilon: ~a")) (partition/laplace/use? #t boolean #f #t #f ("Use Laplace partitioning: ~a" (("enabled" . #t) ("disabled" . #f))))) ("fast-base" 1000 (lambda () (rpgetvar 'solver/mode/fast)) (lambda () #t)) ("coupled-pseudo-transient" 1000 (lambda () (and (rpgetvar 'solver/mode/coupled-pseudo-transient) (and (not (cdr (assq 'rp-unsteady? (%rp-config #f)))) (cdr (assq 'rp-seg? (%rp-config #f))) (not (cdr (assq 'sg-mphase? (%rp-config #f)))) (not (cdr (assq 'sg-melt? (%rp-config #f)))) (not (or (rpgetvar 'battery/model-loaded?) (rpgetvar 'resolved-fc-model-loaded?) (rpgetvar 'sofc_01/sofc-loaded?) (rpgetvar 'pemfc-model-loaded?)))))) (lambda () #f) (flow/scheme 24 integer #f 24 20 ("Pressure-velocity coupling: ~a" (("SIMPLE" . 20) ("SIMPLEC" . 21) ("PISO" . 22) ("Coupled" . 24) ("Phase Coupled SIMPLE" . 23) ("Phase Coupled PISO" . 30)))) (pseudo-transient-formulation? #t boolean #f #t #f ("Pseudo-transient: ~a" (("enabled" . #t) ("disabled" . #f)))) (amg-coupled/greedy-coarsening? #t boolean #f #t #f ("Aggressive AMG coarsening for coupled equations: ~a" (("enabled" . #t) ("disabled" . #f)))) (amg/greedy-coarsening? #t boolean #f #t #f ("Aggressive AMG coarsening for segregated equations: ~a" (("enabled" . #t) ("disabled" . #f)))) (amg-coupled/group-size-3d 6 integer #f 6 8 ("AMG group size for coupled equations: ~a")) (amg-scalar/group-size-3d 6 integer #f 6 8 ("AMG group size for segregated equations: ~a"))) ("reacting-flow-numerics" 1002 (lambda () (and (rpgetvar 'solver/mode/coupled-pseudo-transient) (not (cdr (assq 'rp-unsteady? (%rp-config #f)))) (cdr (assq 'rp-seg? (%rp-config #f))) (not (cdr (assq 'sg-mphase? (%rp-config #f)))) (= (rpgetvar 'flow/scheme) 24) (rpgetvar 'pseudo-transient-formulation?) (or (cdr (assq 'rp-react? (%rp-config #f))) (cdr (assq 'sg-pdf? (%rp-config #f))) (cdr (assq 'sg-pdf-transport? (%rp-config #f))) (cdr (assq 'sg-premixed? (%rp-config #f))) (cdr (assq 'sg-par-premix? (%rp-config #f)))))) (lambda () #t) (density/pseudo-relax 0.25 real #f 0.25 1. ("Density explicit underrelaxation factor: ~a")) (temperature/pseudo-specific? #t boolean #f #t #t) (tvar/pseudo-specific? #t boolean #f #t #f) (enthalpy/pseudo-specific? #t boolean #f #t #f) (species/pseudo-specific? (#t) boolean-list #f (#t) (#f)) (pollutant/pseudo-specific? (#t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t) boolean-list #f (#t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t) (#f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f)) (temperature/pseudo-time-scale-factor 1e+20 real #f 1e+20 1.) (tvar/pseudo-time-scale-factor 1e+20 real #f 1e+20 1.) (enthalpy/pseudo-time-scale-factor 1e+20 real #f 1e+20 1.) (species/pseudo-time-scale-factor (1e+20) real-list #f (1e+20) (1.)) (pollutant/pseudo-time-scale-factor (1e+20 1e+20 1e+20 1e+20 1e+20 1e+20 1e+20 1e+20 1e+20 1e+20 1e+20 1e+20 1e+20 1e+20 1e+20 1e+20 1e+20 1e+20 1e+20 1e+20 1e+20 1e+20 1e+20) real-list #f (1e+20 1e+20 1e+20 1e+20 1e+20 1e+20 1e+20 1e+20 1e+20 1e+20 1e+20 1e+20 1e+20 1e+20 1e+20 1e+20 1e+20 1e+20 1e+20 1e+20 1e+20 1e+20 1e+20) (1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.))) ("species-numerics" 1001 (lambda () (and (rpgetvar 'solver/mode/coupled-pseudo-transient) (not (cdr (assq 'rp-unsteady? (%rp-config #f)))) (cdr (assq 'rp-seg? (%rp-config #f))) (not (cdr (assq 'sg-mphase? (%rp-config #f)))) (= (rpgetvar 'flow/scheme) 24) (rpgetvar 'pseudo-transient-formulation?) (cdr (assq 'rp-spe? (%rp-config #f))) (cdr (assq 'rp-seg? (%rp-config #f))))) (lambda () #t) (density/pseudo-relax 0.25 real #f 0.25 1. ("Density explicit underrelaxation factor: ~a"))) ("tight-amg" 1000 (lambda () (rpgetvar 'solver/mode/tight-amg)) (lambda () #t) (amg-coupled/max-cycles 100 integer #f 100 10 ("Max cycles for coupled systems: ~a")) (amg-scalar/max-cycles 100 integer #f 100 30 ("Max cycles for scalar systems: ~a")) (amg/max-cycles 100 integer #f 100 30) (wd-phi/amg-alpha 0.0001 real #f 0.0001 0.1 ("AMG tolerances: ~a")) (dynamesh/smooth/laplace/amg-alpha 0.0001 real #f 0.0001 0.1) (x-mom/amg-alpha 0.0001 real #f 0.0001 0.1) (y-mom/amg-alpha 0.0001 real #f 0.0001 0.1) (z-mom/amg-alpha 0.0001 real #f 0.0001 0.1) (pressure/amg-alpha 0.0001 real #f 0.0001 0.1) (pressure-coupled/amg-alpha 0.0001 real #f 0.0001 0.1) (temperature/amg-alpha 0.0001 real #f 0.0001 0.1) (p1/amg-alpha 0.0001 real #f 0.0001 0.1) (disco/amg-alpha 0.0001 real #f 0.0001 0.1) (enthalpy/amg-alpha 0.0001 real #f 0.0001 0.1) (species/amg-alpha (0.0001) real-list #f (0.0001) (0.1)) (potential/amg-alpha 0.0001 real #f 0.0001 0.1) (dqmom-iem/amg-alpha 0.0001 real #f 0.0001 0.1) (uds/amg-alpha (0.0001) real-list #f (0.0001) (0.1)) (hyb-init/amg-alpha (0.0001 0.0001) real-list #f (0.0001 0.0001) (0.1 0.1)) (mp/amg-alpha 0.0001 real #f 0.0001 0.1) (granular-temperature/amg-alpha 0.0001 real #f 0.0001 0.1) (pb-disc/amg-alpha (0.0001) real-list #f (0.0001) (0.1)) (pb-qmom/amg-alpha (0.0001) real-list #f (0.0001) (0.1)) (pb-smm/amg-alpha (0.0001) real-list #f (0.0001) (0.1)) (pb-dqmom/amg-alpha (0.0001) real-list #f (0.0001) (0.1)) (iac/amg-alpha 0.0001 real #f 0.0001 0.1) (lsfun/amg-alpha 0.0001 real #f 0.0001 0.1) (w-swirl/amg-alpha 0.0001 real #f 0.0001 0.1) (nut/amg-alpha 0.0001 real #f 0.0001 0.1) (k/amg-alpha 0.0001 real #f 0.0001 0.1) (epsilon/amg-alpha 0.0001 real #f 0.0001 0.1) (v2/amg-alpha 0.0001 real #f 0.0001 0.1) (f/amg-alpha 0.0001 real #f 0.0001 0.1) (kl/amg-alpha 0.0001 real #f 0.0001 0.1) (omega/amg-alpha 0.0001 real #f 0.0001 0.1) (intermit/amg-alpha 0.0001 real #f 0.0001 0.1) (retheta/amg-alpha 0.0001 real #f 0.0001 0.1) (drsm/amg-alpha 0.0001 real #f 0.0001 0.1) (acoustics-waveeq/amg-alpha 0.0001 real #f 0.0001 0.1) (fmean/amg-alpha 0.0001 real #f 0.0001 0.1) (fmean2/amg-alpha 0.0001 real #f 0.0001 0.1) (fvar/amg-alpha 0.0001 real #f 0.0001 0.1) (fvar2/amg-alpha 0.0001 real #f 0.0001 0.1) (ic-fvar/amg-alpha 0.0001 real #f 0.0001 0.1) (vc-fvar/amg-alpha 0.0001 real #f 0.0001 0.1) (vd-fvar/amg-alpha 0.0001 real #f 0.0001 0.1) (ufla-y/amg-alpha 0.0001 real #f 0.0001 0.1) (premixc/amg-alpha 0.0001 real #f 0.0001 0.1) (pdftss/amg-alpha 0.0001 real #f 0.0001 0.1) (pull/amg-alpha 0.0001 real #f 0.0001 0.0001) (amg-c/amg-alpha 0.0001 real #f 0.0001 0.1) (soot-mom/amg-alpha 0.0001 real #f 0.0001 0.1) (tvar/amg-alpha 0.0001 real #f 0.0001 0.1) (ignition/amg-alpha 0.0001 real #f 0.0001 0.1) (ecfm-sigma/amg-alpha 0.0001 real #f 0.0001 0.1) (premix-g-eqn/amg-alpha 0.0001 real #f 0.0001 0.1) (premix-g-var/amg-alpha 0.0001 real #f 0.0001 0.1) (inert/amg-alpha 0.0001 real #f 0.0001 0.1) (wetsteam/amg-alpha 0.0001 real #f 0.0001 0.1)) ("default-urfs" 1000 (lambda () (rpgetvar 'solver/mode/default-urfs)) (lambda () #t) (pseudo-auto-time-step? #t boolean #f #t #t) (pseudo-auto-time-solid? #t boolean #f #t #t) (pseudo/autotime-lscale-option 1 integer #f 1 1) (pseudo-auto-time-step-scale-factor 1. real #f 1. 1.) (pressure-coupled/mom/pseudo-explicit-relax 0.5 real #f 0.5 0.5) (pressure-coupled/pressure/pseudo-explicit-relax 0.5 real #f 0.5 0.5) (potential/pseudo-relax 0.75 real #f 0.75 0.75) (potential-faradaic/pseudo-relax 0.1 real #f 0.1 0.1) (drift/pseudo-relax 0.1 real #f 0.1 0.1) (delh/pseudo-relax 0.9 real #f 0.9 0.9) (disco/pseudo-relax 1. real #f 1. 1.) (cvt/pseudo-relax 1. real #f 1. 1.) (wd-phi/pseudo-relax 0.75 real #f 0.75 0.75) (dynamesh/smooth/laplace/pseudo-relax 0.75 real #f 0.75 0.75) (mom/pseudo-relax 0.5 real #f 0.5 0.5) (pressure/pseudo-relax 0.5 real #f 0.5 0.5) (temperature/pseudo-relax 0.75 real #f 0.75 0.75) (tvar/pseudo-relax 0.75 real #f 0.75 0.75) (enthalpy/pseudo-relax 0.75 real #f 0.75 0.75) (species/pseudo-relax (0.75) real-list #f (0.75) (0.75)) (dqmom-iem/pseudo-relax 0.75 real #f 0.75 0.75) (mp/pseudo-relax 0.5 real #f 0.5 0.5) (w-swirl/pseudo-relax 0.75 real #f 0.75 0.75) (nut/pseudo-relax 0.75 real #f 0.75 0.75) (k/pseudo-relax 0.75 real #f 0.75 0.75) (epsilon/pseudo-relax 0.75 real #f 0.75 0.75) (v2/pseudo-relax 0.75 real #f 0.75 0.75) (f/pseudo-relax 0.75 real #f 0.75 0.75) (kl/pseudo-relax 0.75 real #f 0.75 0.75) (omega/pseudo-relax 0.75 real #f 0.75 0.75) (intermit/pseudo-relax 0.75 real #f 0.75 0.75) (retheta/pseudo-relax 0.75 real #f 0.75 0.75) (drsm/pseudo-relax 0.75 real #f 0.75 0.75) (fmean/pseudo-relax 0.75 real #f 0.75 0.75) (fmean2/pseudo-relax 0.75 real #f 0.75 0.75) (fvar/pseudo-relax 0.75 real #f 0.75 0.75) (fvar2/pseudo-relax 0.75 real #f 0.75 0.75) (premixc/pseudo-relax 0.75 real #f 0.75 0.75) (pdftss/pseudo-relax 0.75 real #f 0.75 0.75) (pull/pseudo-relax 0.75 real #f 0.75 0.75) (granular-temperature/pseudo-relax 0.75 real #f 0.75 0.75) (ecfm-sigma/pseudo-relax 0.75 real #f 0.75 0.75) (premix-g-var/pseudo-relax 0.75 real #f 0.75 0.75) (inert/pseudo-relax 0.75 real #f 0.75 0.75) (pollutant/pseudo-relax (0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75) real-list #f (0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75) (0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75)) (pb-qmom/pseudo-relax (0.75) real-list #f (0.75) (0.75)) (pb-smm/pseudo-relax (0.75) real-list #f (0.75) (0.75)) (pb-dqmom/pseudo-relax (0.75) real-list #f (0.75) (0.75)) (pb-disc/pseudo-relax (0.75) real-list #f (0.75) (0.75)) (iac/pseudo-relax 0.75 real #f 0.75 0.75) (wetsteam/pseudo-relax 0.75 real #f 0.75 0.75) (density/pseudo-relax 1. real #f 1. 1.) (body-force/pseudo-relax 1. real #f 1. 1.) (turb-viscosity/pseudo-relax 1. real #f 1. 1.) (p1/pseudo-relax 1. real #f 1. 1.) (soot-mom/pseudo-relax 1. real #f 1. 0.75) (uds/pseudo-relax (0.75) real-list #f (0.75) (0.75)) (potential/pseudo-implicit-relax 1. real #f 1. 1.) (temperature/pseudo-implicit-relax 1. real #f 1. 1.) (tvar/pseudo-implicit-relax 0.9 real #f 0.9 0.9) (enthalpy/pseudo-implicit-relax 1. real #f 1. 1.) (species/pseudo-implicit-relax (1.) real-list #f (1.) (1.)) (dqmom-iem/pseudo-implicit-relax 1. real #f 1. 1.) (mp/pseudo-implicit-relax 0.5 real #f 0.5 0.5) (w-swirl/pseudo-implicit-relax 0.9 real #f 0.9 0.9) (nut/pseudo-implicit-relax 0.8 real #f 0.8 0.8) (k/pseudo-implicit-relax 0.8 real #f 0.8 0.8) (epsilon/pseudo-implicit-relax 0.8 real #f 0.8 0.8) (v2/pseudo-implicit-relax 0.8 real #f 0.8 0.8) (f/pseudo-implicit-relax 0.8 real #f 0.8 0.8) (kl/pseudo-implicit-relax 0.8 real #f 0.8 0.8) (omega/pseudo-implicit-relax 0.8 real #f 0.8 0.8) (intermit/pseudo-implicit-relax 0.8 real #f 0.8 0.8) (retheta/pseudo-implicit-relax 0.8 real #f 0.8 0.8) (drsm/pseudo-implicit-relax 0.5 real #f 0.5 0.5) (fmean/pseudo-implicit-relax 1. real #f 1. 1.) (fmean2/pseudo-implicit-relax 1. real #f 1. 1.) (fvar/pseudo-implicit-relax 0.9 real #f 0.9 0.9) (fvar2/pseudo-implicit-relax 0.9 real #f 0.9 0.9) (premixc/pseudo-implicit-relax 0.9 real #f 0.9 0.9) (pdftss/pseudo-implicit-relax 1. real #f 1. 1.) (granular-temperature/pseudo-implicit-relax 0.2 real #f 0.2 0.2) (ecfm-sigma/pseudo-implicit-relax 0.9 real #f 0.9 0.9) (premix-g-var/pseudo-implicit-relax 0.8 real #f 0.8 0.8) (inert/pseudo-implicit-relax 1. real #f 1. 1.) (pollutant/pseudo-implicit-relax (1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.) real-list #f (1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.) (1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.)) (pb-qmom/pseudo-implicit-relax (0.5) real-list #f (0.5) (0.5)) (pb-smm/pseudo-implicit-relax (0.5) real-list #f (0.5) (0.5)) (pb-dqmom/pseudo-implicit-relax (0.5) real-list #f (0.5) (0.5)) (pb-disc/pseudo-implicit-relax (0.5) real-list #f (0.5) (0.5)) (iac/pseudo-implicit-relax 0.3 real #f 0.3 0.3) (wetsteam/pseudo-implicit-relax 0.1 real #f 0.1 0.1) (soot-mom/pseudo-implicit-relax 1. real #f 1. 1.) (uds/pseudo-implicit-relax (1.) real-list #f (1.) (1.)) (potential/pseudo-specific? #f boolean #f #f #f) (temperature/pseudo-specific? #t boolean #f #t #t) (tvar/pseudo-specific? #f boolean #f #f #f) (enthalpy/pseudo-specific? #f boolean #f #f #f) (species/pseudo-specific? (#f) boolean-list #f (#f) (#f)) (dqmom-iem/pseudo-specific? #f boolean #f #f #f) (mp/pseudo-specific? #t boolean #f #t #t) (w-swirl/pseudo-specific? #t boolean #f #t #t) (nut/pseudo-specific? #t boolean #f #t #t) (k/pseudo-specific? #t boolean #f #t #t) (epsilon/pseudo-specific? #t boolean #f #t #t) (v2/pseudo-specific? #t boolean #f #t #t) (f/pseudo-specific? #t boolean #f #t #t) (kl/pseudo-specific? #t boolean #f #t #t) (omega/pseudo-specific? #t boolean #f #t #t) (intermit/pseudo-specific? #t boolean #f #t #t) (retheta/pseudo-specific? #t boolean #f #t #t) (drsm/pseudo-specific? #t boolean #f #t #t) (fmean/pseudo-specific? #f boolean #f #f #f) (fmean2/pseudo-specific? #f boolean #f #f #f) (fvar/pseudo-specific? #f boolean #f #f #f) (fvar2/pseudo-specific? #f boolean #f #f #f) (premixc/pseudo-specific? #f boolean #f #f #f) (pdftss/pseudo-specific? #f boolean #f #f #f) (granular-temperature/pseudo-specific? #t boolean #f #t #t) (ecfm-sigma/pseudo-specific? #f boolean #f #f #f) (premix-g-var/pseudo-specific? #f boolean #f #f #f) (inert/pseudo-specific? #f boolean #f #f #f) (pollutant/pseudo-specific? (#f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f) boolean-list #f (#f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f) (#f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f)) (pb-qmom/pseudo-specific? (#t) boolean-list #f (#t) (#t)) (pb-smm/pseudo-specific? (#t) boolean-list #f (#t) (#t)) (pb-dqmom/pseudo-specific? (#t) boolean-list #f (#t) (#t)) (pb-disc/pseudo-specific? (#t) boolean-list #f (#t) (#t)) (iac/pseudo-specific? #t boolean #f #t #t) (wetsteam/pseudo-specific? #t boolean #f #t #t) (soot-mom/pseudo-specific? #f boolean #f #f #f) (uds/pseudo-specific? (#f) boolean-list #f (#f) (#f)) (mom/update-derivatives-after-flow-solve? #t boolean #f #t #t)) ("overset-solver-defaults" 1003 (lambda () (and (rpgetvar 'solver/mode/overset-defaults?) (sg-overset?))) (lambda () #f) (flow/scheme 24 integer #f 24 20) (amg/divergence-epsilon 1000000. real #f 1000000. 1000.))))
))
(dv (
))
(cx1 (
(
(reference-frames-definition (((name . "global") (origin point 0. 0. 0. (frame . parent)) (orientation two-axis (axis ((axis-from axis-label x (frame . global)) (axis-to vector 1. 0. 0. (frame . parent))) ((axis-from axis-label y (frame . global)) (axis-to vector 0. 1. 0. (frame . parent)))) (auto? . #t)) (transformations))))
(reference-frames (((name . "global") (id . 1) (parent . 0) (current-state (origin 0. 0. 0.) (quat 1. 0. 0. 0.)) (motion (motion-type . 0) (velocity 0. 0. 0.) (acceleration 0. 0. 0.) (omega (angle . 0.) (axis 0 0 1)) (alpha (angle . 0.) (axis 0 0 1)) (update . "")) (read-only? . #t))))
(surfaces/groups ((inlet (2)) (interior-surface_body (3)) (outlet (1)) (wall (0))))
(cx-virtual-id-list (4196 4197 4199 4200))
(cx-surface-id-map ((2 4200) (3 4199) (1 4197) (0 4196)))
(cx-surface-type ((2 0) (0 0) (1 0) (3 0)))
(cx-surface-def-list ((4200 () (zone-surface 4200 5) #f) (4199 () (zone-surface 4199 1) #f) (4197 () (zone-surface 4197 6) #f) (4196 () (zone-surface 4196 7) #f)))
(cx-surface-list #((0 ((zid 7) (type zone-surf) (name wall) (status active) (facet-info (0 200 0 208)))) (1 ((zid 6) (type zone-surf) (name outlet) (status active) (facet-info (0 10 0 11)))) (2 ((zid 5) (type zone-surf) (name inlet) (status susp) (facet-info (0 0 0 0)))) (3 ((zid 1) (type zone-surf) (name interior-surface_body) (status active) (facet-info (0 1890 0 1134)))) #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f))
(view-list ((front ((0.05 0.005 0.2625) (0.05 0.005 0.) (0. 1. 0.) 0.105 0.105 "perspective") #(1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1)) (back ((0.05 0.005 -0.2625) (0.05 0.005 0.) (0. 1. 0.) 0.105 0.105 "perspective") #(1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1))))
(lights/headlight/on? #f)
(filled-grid? #f)
(xy/bottom -1)
(scale/right -0.7)
(cx-case-version (19 4 0))
(cx-case-read-event-called-already #t)
)
))
(bc (surface_body fluid mixture) (
(material . air)
(sources? . #f)
(source-terms (mass) (x-momentum) (y-momentum) (k) (epsilon) (energy))
(fixed? . #f)
(fixes (x-velocity (inactive . #f) (constant . 0) (profile "" "")) (y-velocity (inactive . #f) (constant . 0) (profile "" "")) (k (inactive . #f) (constant . 0) (profile "" "")) (epsilon (inactive . #f) (constant . 0) (profile "" "")) (temperature (inactive . #f) (constant . 0) (profile "" "")))
(mrf-motion? . #f)
(mrf-relative-to-thread . -1)
(mrf-omega (constant . 0) (profile "" ""))
(mrf-grid-x-vel (constant . 0) (profile "" ""))
(mrf-grid-y-vel (constant . 0) (profile "" ""))
(mrf-x-origin (constant . 0) (profile "" ""))
(mrf-y-origin (constant . 0) (profile "" ""))
(mrf-udf-zmotion-name . "none")
(mgrid-motion? . #f)
(mgrid-relative-to-thread . -1)
(mgrid-omega (constant . 0) (profile "" ""))
(mgrid-grid-x-vel (constant . 0) (profile "" ""))
(mgrid-grid-y-vel (constant . 0) (profile "" ""))
(mgrid-x-origin (constant . 0) (profile "" ""))
(mgrid-y-origin (constant . 0) (profile "" ""))
(mgrid-udf-zmotion-name . "none")
(deactivated? . #f)
(laminar? . #f)
(laminar-mut-zero? . #t)
(les-embedded-spec . 1)
(les-embedded-mom-scheme . 0)
(les-embedded-c-wale . 0.325)
(les-embedded-c-smag . 0.1)
(porous? . #f)
(direction-1/x (constant . 1) (profile "" ""))
(direction-1/y (constant . 0) (profile "" ""))
(rel-vel-resistance? . #t)
(porous-r/1 (constant . 211100000.) (profile "" ""))
(porous-r/2 (constant . 211100000.) (profile "" ""))
(alt-inertial-form? . #f)
(porous-c/1 (constant . 0) (profile "" ""))
(porous-c/2 (constant . 0) (profile "" ""))
(c0 . 0)
(c1 . 0)
(porosity (constant . 1) (profile "" ""))
(viscosity-ratio (constant . 1.))
(equib-thermal? . #t)
(non-equib-thermal? . #f)
(solid-material . aluminum)
(area-density (constant . 1) (profile "" ""))
(heat-transfer-coeff (constant . 1) (profile "" ""))
))
(bc (inlet pressure-inlet mixture) (
(frame-of-reference . 0)
(p0 (constant . 0) (profile "" ""))
(p (constant . 0) (profile "" ""))
(t0 (constant . 300) (profile "" ""))
(direction-spec . 1)
(coordinate-system . 0)
(ni (constant . 1) (profile "" ""))
(nj (constant . 0) (profile "" ""))
(ni2 (constant . 1) (profile "" ""))
(nj2 (constant . 0) (profile "" ""))
(ai . 1)
(aj . 0)
(ak . 0)
(x-origin . 0)
(y-origin . 0)
(z-origin . 0)
(prevent-reverse-flow? . #f)
(ke-spec . 2)
(k (constant . 1) (profile "" ""))
(e (constant . 1) (profile "" ""))
(turb-intensity . 0.05)
(turb-length-scale . 1)
(turb-hydraulic-diam . 1)
(turb-viscosity-ratio . 10)
(mixing-plane-thread? . #f)
(les-spec . 0)
))
(bc (interior-surface_body interior mixture) (
))
(bc (outlet pressure-outlet mixture) (
(frame-of-reference . 0)
(p (constant . 0) (profile "" ""))
(p-profile-multiplier . 1.)
(t0 (constant . 300) (profile "" ""))
(direction-spec . 1)
(ni (constant . 1) (profile "" ""))
(nj (constant . 0) (profile "" ""))
(ai . 1)
(aj . 0)
(ak . 0)
(x-origin . 0)
(y-origin . 0)
(z-origin . 0)
(ke-spec . 2)
(k (constant . 1) (profile "" ""))
(e (constant . 1) (profile "" ""))
(turb-intensity . 0.05)
(turb-length-scale . 1)
(turb-hydraulic-diam . 1)
(turb-viscosity-ratio . 10)
(mixing-plane-thread? . #f)
(p-backflow-spec-gen . 0)
(avg-press-spec? . #f)
(avg-option . 0)
(targeted-mf-boundary? . #f)
(targeted-mf (constant . 1) (profile "" ""))
(targeted-mf-pmax (constant . 5000000.) (profile "" ""))
(targeted-mf-pmin (constant . 1) (profile "" ""))
))
(bc (wall wall mixture) (
(d . 0)
(q-dot (constant . 0) (profile "" ""))
(material . copper)
(thermal-bc . 0)
(t (constant . 350) (profile "" ""))
(q (constant . 0) (profile "" ""))
(h (constant . 0) (profile "" ""))
(tinf (constant . 300) (profile "" ""))
(motion-bc . 0)
(shear-bc . 0)
(rough-bc . 0)
(relative? . #t)
(rotating? . #f)
(vmag (constant . 0) (profile "" ""))
(ni . 1)
(nj . 0)
(components? . #f)
(u (constant . 0) (profile "" ""))
(v (constant . 0) (profile "" ""))
(ex-emiss (constant . 1) (profile "" ""))
(trad (constant . 300) (profile "" ""))
(rough-nasa? . #f)
(rough-shin-et-al? . #f)
(rough-data? . #f)
(roughness-height (constant . 0) (profile "" ""))
(roughness-const (constant . 0.5) (profile "" ""))
(roughness-height-cp (constant . 0) (profile "" ""))
(roughness-const-cp (constant . 0.5) (profile "" ""))
(roughness-const-nasa (constant . 0.5) (profile "" ""))
(roughness-const-shin (constant . 0.5) (profile "" ""))
(roughness-const-data (constant . 0.5) (profile "" ""))
(variable-roughness (inactive . #f) (profile "" ""))
(free-stream-velocity . 1)
(free-stream-temp . 300)
(characteristic-length . 1)
(free-stream-temp-cp . 300)
(characteristic-length-cp . 1)
(liquid-content (constant . 1) (profile "" ""))
(liquid-content-cp (constant . 1) (profile "" ""))
(droplet-diameter (constant . 20) (profile "" ""))
(dpm/rq-roughness . 0)
(dpm/rsm-roughness . 0)
(dpm/bc-erosion-generic? . #t)
(dpm/bc-erosion-finnie? . #t)
(dpm/bc-erosion-finnie-k . 2.12e-07)
(dpm/bc-erosion-finnie-vel-exp . 2)
(dpm/bc-erosion-finnie-max-erosion-angle . 0.3228859000000001)
(dpm/bc-erosion-mclaury? . #t)
(dpm/bc-erosion-mclaury-a . 1.99e-07)
(dpm/bc-erosion-mclaury-vel-exp . 1.73)
(dpm/bc-erosion-mclaury-transition-angle . 0.2617994)
(dpm/bc-erosion-mclaury-b . -13.3)
(dpm/bc-erosion-mclaury-c . 7.85)
(dpm/bc-erosion-mclaury-w . 1)
(dpm/bc-erosion-mclaury-x . 1.09)
(dpm/bc-erosion-mclaury-y . 0.125)
(dpm/bc-erosion-oka? . #t)
(dpm/bc-erosion-oka-e90 . 0.0006154000000000001)
(dpm/bc-erosion-oka-hv . 1.8)
(dpm/bc-erosion-oka-n1 . 0.8)
(dpm/bc-erosion-oka-n2 . 1.3)
(dpm/bc-erosion-oka-k2 . 2.35)
(dpm/bc-erosion-oka-k3 . 0.19)
(dpm/bc-erosion-oka-dref . 0.000326)
(dpm/bc-erosion-oka-vref . 104)
(dpm/bc-erosion-shear? . #t)
(dpm/bc-erosion-shear-v . 1.89e-08)
(dpm/bc-erosion-shear-c . 1.41)
(dpm/bc-erosion-shear-packing-limit . 0.6300000000000001)
(dpm/bc-erosion-shielding? . #t)
(omega (constant . 0) (profile "" ""))
(x-origin . 0)
(y-origin . 0)
(shear-x (constant . 0) (profile "" ""))
(shear-y (constant . 0) (profile "" ""))
(fslip . 0)
(eslip . 0)
(surf-tens-grad . 0)
(specular-coeff . 0)
(caf (constant . 1) (profile "" ""))
))
(ni ((2 surface_body)(5 inlet)(1 interior-surface_body)(6 outlet)(7 wall)))